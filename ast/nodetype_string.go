// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeDocument-0]
	_ = x[NodeParagraph-1]
	_ = x[NodeHeading-2]
	_ = x[NodeHeadingC8hMarker-3]
	_ = x[NodeThematicBreak-4]
	_ = x[NodeBlockquote-5]
	_ = x[NodeBlockquoteMarker-6]
	_ = x[NodeList-7]
	_ = x[NodeListItem-8]
	_ = x[NodeHTMLBlock-9]
	_ = x[NodeInlineHTML-10]
	_ = x[NodeCodeBlock-11]
	_ = x[NodeCodeBlockFenceOpenMarker-12]
	_ = x[NodeCodeBlockFenceCloseMarker-13]
	_ = x[NodeCodeBlockFenceInfoMarker-14]
	_ = x[NodeCodeBlockCode-15]
	_ = x[NodeText-16]
	_ = x[NodeEmphasis-17]
	_ = x[NodeEmA6kOpenMarker-18]
	_ = x[NodeEmA6kCloseMarker-19]
	_ = x[NodeEmU8eOpenMarker-20]
	_ = x[NodeEmU8eCloseMarker-21]
	_ = x[NodeStrong-22]
	_ = x[NodeStrongA6kOpenMarker-23]
	_ = x[NodeStrongA6kCloseMarker-24]
	_ = x[NodeStrongU8eOpenMarker-25]
	_ = x[NodeStrongU8eCloseMarker-26]
	_ = x[NodeCodeSpan-27]
	_ = x[NodeCodeSpanOpenMarker-28]
	_ = x[NodeCodeSpanContent-29]
	_ = x[NodeCodeSpanCloseMarker-30]
	_ = x[NodeHardBreak-31]
	_ = x[NodeSoftBreak-32]
	_ = x[NodeLink-33]
	_ = x[NodeImage-34]
	_ = x[NodeBang-35]
	_ = x[NodeOpenBracket-36]
	_ = x[NodeCloseBracket-37]
	_ = x[NodeOpenParen-38]
	_ = x[NodeCloseParen-39]
	_ = x[NodeLinkText-40]
	_ = x[NodeLinkDest-41]
	_ = x[NodeLinkTitle-42]
	_ = x[NodeLinkSpace-43]
	_ = x[NodeHTMLEntity-44]
	_ = x[NodeLinkRefDefBlock-45]
	_ = x[NodeLinkRefDef-46]
	_ = x[NodeLess-47]
	_ = x[NodeGreater-48]
	_ = x[NodeTaskListItemMarker-100]
	_ = x[NodeStrikethrough-101]
	_ = x[NodeStrikethrough1OpenMarker-102]
	_ = x[NodeStrikethrough1CloseMarker-103]
	_ = x[NodeStrikethrough2OpenMarker-104]
	_ = x[NodeStrikethrough2CloseMarker-105]
	_ = x[NodeTable-106]
	_ = x[NodeTableHead-107]
	_ = x[NodeTableRow-108]
	_ = x[NodeTableCell-109]
	_ = x[NodeEmoji-200]
	_ = x[NodeEmojiUnicode-201]
	_ = x[NodeEmojiImg-202]
	_ = x[NodeEmojiAlias-203]
	_ = x[NodeMathBlock-300]
	_ = x[NodeMathBlockOpenMarker-301]
	_ = x[NodeMathBlockContent-302]
	_ = x[NodeMathBlockCloseMarker-303]
	_ = x[NodeInlineMath-304]
	_ = x[NodeInlineMathOpenMarker-305]
	_ = x[NodeInlineMathContent-306]
	_ = x[NodeInlineMathCloseMarker-307]
	_ = x[NodeBackslash-400]
	_ = x[NodeBackslashContent-401]
	_ = x[NodeVditorCaret-405]
	_ = x[NodeFootnotesDefBlock-410]
	_ = x[NodeFootnotesDef-411]
	_ = x[NodeFootnotesRef-412]
	_ = x[NodeToC-415]
	_ = x[NodeHeadingID-420]
	_ = x[NodeYamlFrontMatter-425]
	_ = x[NodeYamlFrontMatterOpenMarker-426]
	_ = x[NodeYamlFrontMatterContent-427]
	_ = x[NodeYamlFrontMatterCloseMarker-428]
	_ = x[NodeBlockRef-430]
	_ = x[NodeBlockRefID-431]
	_ = x[NodeBlockRefSpace-432]
	_ = x[NodeBlockRefText-433]
	_ = x[NodeBlockRefDynamicText-434]
	_ = x[NodeMark-450]
	_ = x[NodeMark1OpenMarker-451]
	_ = x[NodeMark1CloseMarker-452]
	_ = x[NodeMark2OpenMarker-453]
	_ = x[NodeMark2CloseMarker-454]
	_ = x[NodeKramdownBlockIAL-455]
	_ = x[NodeKramdownSpanIAL-456]
	_ = x[NodeTag-460]
	_ = x[NodeTagOpenMarker-461]
	_ = x[NodeTagCloseMarker-462]
	_ = x[NodeBlockQueryEmbed-465]
	_ = x[NodeOpenBrace-466]
	_ = x[NodeCloseBrace-467]
	_ = x[NodeBlockQueryEmbedScript-468]
	_ = x[NodeSuperBlock-475]
	_ = x[NodeSuperBlockOpenMarker-476]
	_ = x[NodeSuperBlockLayoutMarker-477]
	_ = x[NodeSuperBlockCloseMarker-478]
	_ = x[NodeSup-485]
	_ = x[NodeSupOpenMarker-486]
	_ = x[NodeSupCloseMarker-487]
	_ = x[NodeSub-490]
	_ = x[NodeSubOpenMarker-491]
	_ = x[NodeSubCloseMarker-492]
	_ = x[NodeGitConflict-495]
	_ = x[NodeGitConflictOpenMarker-496]
	_ = x[NodeGitConflictContent-497]
	_ = x[NodeGitConflictCloseMarker-498]
	_ = x[NodeIFrame-500]
	_ = x[NodeAudio-505]
	_ = x[NodeVideo-510]
	_ = x[NodeKbd-515]
	_ = x[NodeKbdOpenMarker-516]
	_ = x[NodeKbdCloseMarker-517]
	_ = x[NodeUnderline-520]
	_ = x[NodeUnderlineOpenMarker-521]
	_ = x[NodeUnderlineCloseMarker-522]
	_ = x[NodeBr-525]
	_ = x[NodeTextMark-530]
	_ = x[NodeWidget-535]
	_ = x[NodeFileAnnotationRef-540]
	_ = x[NodeFileAnnotationRefID-541]
	_ = x[NodeFileAnnotationRefSpace-542]
	_ = x[NodeFileAnnotationRefText-543]
	_ = x[NodeAttributeView-550]
	_ = x[NodeTypeMaxVal-1024]
}

const _NodeType_name = "NodeDocumentNodeParagraphNodeHeadingNodeHeadingC8hMarkerNodeThematicBreakNodeBlockquoteNodeBlockquoteMarkerNodeListNodeListItemNodeHTMLBlockNodeInlineHTMLNodeCodeBlockNodeCodeBlockFenceOpenMarkerNodeCodeBlockFenceCloseMarkerNodeCodeBlockFenceInfoMarkerNodeCodeBlockCodeNodeTextNodeEmphasisNodeEmA6kOpenMarkerNodeEmA6kCloseMarkerNodeEmU8eOpenMarkerNodeEmU8eCloseMarkerNodeStrongNodeStrongA6kOpenMarkerNodeStrongA6kCloseMarkerNodeStrongU8eOpenMarkerNodeStrongU8eCloseMarkerNodeCodeSpanNodeCodeSpanOpenMarkerNodeCodeSpanContentNodeCodeSpanCloseMarkerNodeHardBreakNodeSoftBreakNodeLinkNodeImageNodeBangNodeOpenBracketNodeCloseBracketNodeOpenParenNodeCloseParenNodeLinkTextNodeLinkDestNodeLinkTitleNodeLinkSpaceNodeHTMLEntityNodeLinkRefDefBlockNodeLinkRefDefNodeLessNodeGreaterNodeTaskListItemMarkerNodeStrikethroughNodeStrikethrough1OpenMarkerNodeStrikethrough1CloseMarkerNodeStrikethrough2OpenMarkerNodeStrikethrough2CloseMarkerNodeTableNodeTableHeadNodeTableRowNodeTableCellNodeEmojiNodeEmojiUnicodeNodeEmojiImgNodeEmojiAliasNodeMathBlockNodeMathBlockOpenMarkerNodeMathBlockContentNodeMathBlockCloseMarkerNodeInlineMathNodeInlineMathOpenMarkerNodeInlineMathContentNodeInlineMathCloseMarkerNodeBackslashNodeBackslashContentNodeVditorCaretNodeFootnotesDefBlockNodeFootnotesDefNodeFootnotesRefNodeToCNodeHeadingIDNodeYamlFrontMatterNodeYamlFrontMatterOpenMarkerNodeYamlFrontMatterContentNodeYamlFrontMatterCloseMarkerNodeBlockRefNodeBlockRefIDNodeBlockRefSpaceNodeBlockRefTextNodeBlockRefDynamicTextNodeMarkNodeMark1OpenMarkerNodeMark1CloseMarkerNodeMark2OpenMarkerNodeMark2CloseMarkerNodeKramdownBlockIALNodeKramdownSpanIALNodeTagNodeTagOpenMarkerNodeTagCloseMarkerNodeBlockQueryEmbedNodeOpenBraceNodeCloseBraceNodeBlockQueryEmbedScriptNodeSuperBlockNodeSuperBlockOpenMarkerNodeSuperBlockLayoutMarkerNodeSuperBlockCloseMarkerNodeSupNodeSupOpenMarkerNodeSupCloseMarkerNodeSubNodeSubOpenMarkerNodeSubCloseMarkerNodeGitConflictNodeGitConflictOpenMarkerNodeGitConflictContentNodeGitConflictCloseMarkerNodeIFrameNodeAudioNodeVideoNodeKbdNodeKbdOpenMarkerNodeKbdCloseMarkerNodeUnderlineNodeUnderlineOpenMarkerNodeUnderlineCloseMarkerNodeBrNodeTextMarkNodeWidgetNodeFileAnnotationRefNodeFileAnnotationRefIDNodeFileAnnotationRefSpaceNodeFileAnnotationRefTextNodeAttributeViewNodeTypeMaxVal"

var _NodeType_map = map[NodeType]string{
	0:    _NodeType_name[0:12],
	1:    _NodeType_name[12:25],
	2:    _NodeType_name[25:36],
	3:    _NodeType_name[36:56],
	4:    _NodeType_name[56:73],
	5:    _NodeType_name[73:87],
	6:    _NodeType_name[87:107],
	7:    _NodeType_name[107:115],
	8:    _NodeType_name[115:127],
	9:    _NodeType_name[127:140],
	10:   _NodeType_name[140:154],
	11:   _NodeType_name[154:167],
	12:   _NodeType_name[167:195],
	13:   _NodeType_name[195:224],
	14:   _NodeType_name[224:252],
	15:   _NodeType_name[252:269],
	16:   _NodeType_name[269:277],
	17:   _NodeType_name[277:289],
	18:   _NodeType_name[289:308],
	19:   _NodeType_name[308:328],
	20:   _NodeType_name[328:347],
	21:   _NodeType_name[347:367],
	22:   _NodeType_name[367:377],
	23:   _NodeType_name[377:400],
	24:   _NodeType_name[400:424],
	25:   _NodeType_name[424:447],
	26:   _NodeType_name[447:471],
	27:   _NodeType_name[471:483],
	28:   _NodeType_name[483:505],
	29:   _NodeType_name[505:524],
	30:   _NodeType_name[524:547],
	31:   _NodeType_name[547:560],
	32:   _NodeType_name[560:573],
	33:   _NodeType_name[573:581],
	34:   _NodeType_name[581:590],
	35:   _NodeType_name[590:598],
	36:   _NodeType_name[598:613],
	37:   _NodeType_name[613:629],
	38:   _NodeType_name[629:642],
	39:   _NodeType_name[642:656],
	40:   _NodeType_name[656:668],
	41:   _NodeType_name[668:680],
	42:   _NodeType_name[680:693],
	43:   _NodeType_name[693:706],
	44:   _NodeType_name[706:720],
	45:   _NodeType_name[720:739],
	46:   _NodeType_name[739:753],
	47:   _NodeType_name[753:761],
	48:   _NodeType_name[761:772],
	100:  _NodeType_name[772:794],
	101:  _NodeType_name[794:811],
	102:  _NodeType_name[811:839],
	103:  _NodeType_name[839:868],
	104:  _NodeType_name[868:896],
	105:  _NodeType_name[896:925],
	106:  _NodeType_name[925:934],
	107:  _NodeType_name[934:947],
	108:  _NodeType_name[947:959],
	109:  _NodeType_name[959:972],
	200:  _NodeType_name[972:981],
	201:  _NodeType_name[981:997],
	202:  _NodeType_name[997:1009],
	203:  _NodeType_name[1009:1023],
	300:  _NodeType_name[1023:1036],
	301:  _NodeType_name[1036:1059],
	302:  _NodeType_name[1059:1079],
	303:  _NodeType_name[1079:1103],
	304:  _NodeType_name[1103:1117],
	305:  _NodeType_name[1117:1141],
	306:  _NodeType_name[1141:1162],
	307:  _NodeType_name[1162:1187],
	400:  _NodeType_name[1187:1200],
	401:  _NodeType_name[1200:1220],
	405:  _NodeType_name[1220:1235],
	410:  _NodeType_name[1235:1256],
	411:  _NodeType_name[1256:1272],
	412:  _NodeType_name[1272:1288],
	415:  _NodeType_name[1288:1295],
	420:  _NodeType_name[1295:1308],
	425:  _NodeType_name[1308:1327],
	426:  _NodeType_name[1327:1356],
	427:  _NodeType_name[1356:1382],
	428:  _NodeType_name[1382:1412],
	430:  _NodeType_name[1412:1424],
	431:  _NodeType_name[1424:1438],
	432:  _NodeType_name[1438:1455],
	433:  _NodeType_name[1455:1471],
	434:  _NodeType_name[1471:1494],
	450:  _NodeType_name[1494:1502],
	451:  _NodeType_name[1502:1521],
	452:  _NodeType_name[1521:1541],
	453:  _NodeType_name[1541:1560],
	454:  _NodeType_name[1560:1580],
	455:  _NodeType_name[1580:1600],
	456:  _NodeType_name[1600:1619],
	460:  _NodeType_name[1619:1626],
	461:  _NodeType_name[1626:1643],
	462:  _NodeType_name[1643:1661],
	465:  _NodeType_name[1661:1680],
	466:  _NodeType_name[1680:1693],
	467:  _NodeType_name[1693:1707],
	468:  _NodeType_name[1707:1732],
	475:  _NodeType_name[1732:1746],
	476:  _NodeType_name[1746:1770],
	477:  _NodeType_name[1770:1796],
	478:  _NodeType_name[1796:1821],
	485:  _NodeType_name[1821:1828],
	486:  _NodeType_name[1828:1845],
	487:  _NodeType_name[1845:1863],
	490:  _NodeType_name[1863:1870],
	491:  _NodeType_name[1870:1887],
	492:  _NodeType_name[1887:1905],
	495:  _NodeType_name[1905:1920],
	496:  _NodeType_name[1920:1945],
	497:  _NodeType_name[1945:1967],
	498:  _NodeType_name[1967:1993],
	500:  _NodeType_name[1993:2003],
	505:  _NodeType_name[2003:2012],
	510:  _NodeType_name[2012:2021],
	515:  _NodeType_name[2021:2028],
	516:  _NodeType_name[2028:2045],
	517:  _NodeType_name[2045:2063],
	520:  _NodeType_name[2063:2076],
	521:  _NodeType_name[2076:2099],
	522:  _NodeType_name[2099:2123],
	525:  _NodeType_name[2123:2129],
	530:  _NodeType_name[2129:2141],
	535:  _NodeType_name[2141:2151],
	540:  _NodeType_name[2151:2172],
	541:  _NodeType_name[2172:2195],
	542:  _NodeType_name[2195:2221],
	543:  _NodeType_name[2221:2246],
	550:  _NodeType_name[2246:2263],
	1024: _NodeType_name[2263:2277],
}

func (i NodeType) String() string {
	if str, ok := _NodeType_map[i]; ok {
		return str
	}
	return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
}
